<% if (emitMaps) { -%>
    <%- include('map', { iface: iface, isRecord: false, suffix: mapSuffix }) %>
<% } %>

<% if (emitRecords) { -%>
    <%- include('map', { iface: iface, isRecord: true, suffix: 'RecordShape' }) %>

    /**
     * Default fields that must be provided in <%= ifaceName %>Record.
     */
    export interface <%= ifaceName %>RecordDefaults {
        <% iface.members.forEach(function(member) { -%>
            <% if (member.type) { -%>
                <%= member.name.text %>: <%- this.typeMap(member, true) %>
            <% } -%>
        <% }.bind(this)) -%>
    }

    /**
     * Typed <%= ifaceName %>Record constructor.
     */
    export let <%= ifaceName %>RecordCtor: RecordCtor<<%= ifaceName %>RecordDefaults, <%= ifaceName %>RecordShape> = Immutable.Record as any;

    /**
     * Special method to parse <%= ifaceName %>Record with all the dependencies.
     */
    export function parse<%= ifaceName %><%= recordSuffix %>(value: <%= ifaceName %>, deps: any): <%= ifaceName %>RecordShape {
        var recordWalker = function(value, key) {
            switch(true) {
                <% this.forEach(this.ownDeps(ifaceName), function(depType, depFieldName) { %>
                    case key == '<%= depFieldName %>':
                       <% if (this.isArrayType(depType)) { -%>
                            if (value != null) {
                                return Immutable.List(value.map((item) => {
                                    return deps.<%= this.sanitizeTypeName(depType) %><%= recordSuffix %>.fromJS(item, deps);
                                }));
                            } else {
                                return undefined;
                            }
                       <%} else if (this.isDictionaryType(depType)) { -%>
                           let map = {};
                           for (let key in value) {
                               if (value.hasOwnProperty(key)) {
                                   let val = value[key];
                                   if (val != null) {
                                       map[key] = deps.<%= this.sanitizeTypeName(depType) %><%= recordSuffix %>.fromJS(val, deps);
                                   } else {
                                       map[key] = undefined;
                                   }
                               }
                           }
                           return Immutable.Map(map);
                       <%} else {-%>
                            if (value != null) {
                                return deps.<%= depType %><%= recordSuffix %>.fromJS(value, deps);
                            } else {
                                return undefined;
                            }
                       <% } -%>
                <% }.bind(this)) %>
                default: return fromJSDefault(value);
            }
        };

        var result: any = {};
        for (var k in value) {
            if (value.hasOwnProperty) {
                result[k] = recordWalker(value[k], k);
            }
        }

        return new deps.<%= ifaceName %><%= recordSuffix %>(result);
    }

    export class <%= ifaceName %><%= recordSuffix %> extends <%= ifaceName %>RecordCtor({
        <% iface.members.forEach(function(member) { -%>
            <% if (member.type) { -%>
                <%= member.name.text %>: <%- this.initializer(member) %>,
            <% } -%>
        <% }.bind(this)) -%>
    }) {
        static fromJS(value: <%= ifaceName %>, deps: any): <%= ifaceName %><%= recordSuffix %> {
            return parse<%= ifaceName %><%= recordSuffix %>(value, deps)
        }
    }
<% } -%>
