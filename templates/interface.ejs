/**
 * Map interface for <%= ifaceName %> with specialized getters and setters.
 */
export interface <%= ifaceName %>Map extends <% if (isRecordsReady) { %><%= ifaceName %>, <% } %>Immutable.Map<string, <%= indexerType %>> {
    <% if (emitMarkers) { -%>
        <%= ifaceName %>Map: <%= ifaceName %>Map
    <% } -%>

    <% iface.members.forEach(function(member) { -%>
        <%- include('member', { iface: iface, member: member }) %>
    <% }) -%>
    get(key: string, defaultValue?: any): <%= indexerType %>;
    set(key: string, value: typeof undefined): <%= ifaceName %>Map;
}
<% if (isRecordsReady) { -%>

    /**
     * Default fields that must be provided in <%= ifaceName %>Record.
     */
    export interface <%= ifaceName %>RecordDefaults {
        <% iface.members.forEach(function(member) { -%>
            <%= member.name.text %>: <%= this.type(member) %>
        <% }.bind(this)) -%>
    }

    /**
     * Typed <%= ifaceName %>Record constructor.
     */
    export let <%= ifaceName %>RecordCtor: RecordCtor<<%= ifaceName %>RecordDefaults, <%= ifaceName %>Map> = Immutable.Record as any;

    /**
     * <%= ifaceName %>Record dependencies
     */
    export interface <%= ifaceName %>RecordDeps {
        <% this.deps(ifaceName).forEach(function(dep) { -%>
           <%= dep %>Record: RecordClass<<%= dep %>Map>
        <% }.bind(this)) -%>
    }

    /**
     * Special method to parse <%= ifaceName %>Record with all the dependencies.
     */
    export function parse<%= ifaceName %>Record(value: <%= ifaceName %>, deps: <%= ifaceName %>RecordDeps): <%= ifaceName %>Map {
        var recordWalker = function(value, key) {
            switch(true) {
                <% this.forEach(this.ownDeps(ifaceName), function(depType, depFieldName) { %>
                    case key == '<%= depFieldName %>':
                       return parse<%= depType %>Record(value, deps);
                <% }.bind(this)) %>
                default: return fromJSDefault(value);
            }
        };

        var result: any = {};
        for (var k in value) {
            if (value.hasOwnProperty) {
                result[k] = recordWalker(value[k], k);
            }
        }

        return new deps.<%= ifaceName %>Record(result);
    }
<% } -%>
